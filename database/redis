Redis是什么
	REmote DIctionary Server
	是一个key-value存储系统
	是一个开源的数据库
		C语言编写
		支持网络
		可基于内存亦可持久化
	数据结构服务器
		值（value）支持多种数据类型
	和其它key-value缓存产品比较有三大特点
		支持数据的持久化，可将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。
		不仅仅支持简单的key-value类型的数据，同时还提供list、set、hash、zset等数据结构的存储。
		支持数据备份，即master-slvae模式的数据备份
Redis优势
	性能极高
	数据类型丰富
	原子性：单线程
	丰富的特性，支持publis/subscribe，通知，key过期等特性
	支持丰富的客户端，支持现阶段流行的多种语言
Redis配置
	daemonize no
		Redis默认不是以守护进程的方式来运行，可以配置该参数，使用yes来启用守护进程
	pidfile /var/run/redis.pid
		当redis以守护进程方式运行时，默认会把pid写入该文件（自动创建）
	port 6379
		Redis监听端口，默认为6379
	bing 127.0.0.1 192.168.0.2
		绑定的主机地址，可配一个或多个，只监听绑定的主机
	timeout 0
		当客户端闲置多长时间后关闭连接，如果为0,则关闭该功能（单位为秒）
	loglevel notice 指定日志记录级别
		Redis总共支持4个级别debug、vebose、notice、warning，默认为verbose
	logfile stdout
		日志文件名称
	database 16
		设置数据库的数量，默认使用的是0,可以使用select <dbid>来连接指定的数据库
	save <seconds> <changes>
		指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合使用。
		默认值为 
			save 900 1 
			save 300 10 
			save 60 10000
	rdbcompression yes
		指定存储至本地数据库时是否压缩数据，默认为yes，关闭时文件会很大；
	dbfilename dump.rdb
		数据库文件名称，默认为dump.rdb
	dir ./
		指定本地数据库存放目录
	slaveof <masterip> <masterport> 
		当本机为slave 服务时，设置master服务的IP地址和端口，当Redis启动时，它会自动从master进行数据同步
	masterauth <master-password>
		当master设置密码保护时，slave服务连接master的密码
	requirepass 123456
		设置Redis连接密码，客户端连接时需要提供密码；
	maxclients 10000
		设置同一时间最大客户端连接数，默认无限制，如果设置为0,表示不做限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached
	maxmemory <bytes> 
		指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试已到期或即将到期的key，当此方法处理后，仍然到达最大的内存设置，将无法再进行写入操作，但可以进行读操作，Redis新的vm机制，会把key存放在内存，value会存放在swap区
	appendonly no
		指定是否在每次更新操作后进行日志记录。Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为Redis本身同步数据文件是按上面save条件来同步的，所以有的数据在一段时间内只存在于内存中；
	appendfilename "appendonly.aof"
		指定更新日志文件名，默认为appendonly.aof
	appendfsync everysec
		指定日志更新条件，共三个值可选
			no:表示等操作系统进行数据缓存同步到磁盘（快）
			always:表示每次更新后手动调用fsync(),将数据写入磁盘（慢，安全）
			everysec:表示每秒同步一次（折衷，默认值）
	include /path/to/local.conf
		指定包含其他的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例有拥有自己的特定的配置文件
Redis支持的数据类型
	Key
		字符串类型，不允许出现空格或者换行之类的特殊字符
		在使用时可以自定义一个key的格式，如user:id:field
		key不要太长，占内存，查询慢
		key不要太短，最好具有可读性
	String
		Redis最基本的数据类型，一个key对应一个value
		可以包含任何数据，如果jpg图片或者序列化的对象
		一个键最大能存储512MB
	Hash
		是一个键值对的集合
		是一个String类型的field和value的映射表，特别适合用于存储对象
	List(列表)
		每个元素都是String类型的双向链表
		列表最多可存储2**32-1(4294967295,每个列表可存储40多亿)
		不适合按照index存取，需要遍历
	Set(集合)
		Set是String类型的无序集合
		通过hashtable实现的
		集合中最大的成员数为2**32-1(4294967295,每个集合可存储40多亿)
	Zset（sorted set：有序集合）
		zset和set一样，也是String类型元素的集合，且不允许重复
		每个元素都会关联一个double类型的分数，通过分数来给元素排序
		成员是唯一的，但分数可以重复
常用命令
	大写的是命令，小写的是值
		NX: non exists
		TTL: time to live
		PTTL: precise time to live
		[M]GET: Multi
		[H]SET: Hash
		[L]PUSH: List
		[S]ADD: Set
		[Z]ADD: Sorted set
	Key
		DEL key [key...]
			删除指定的键
		EXISTS key [key...]
			检查指定键是否存在
		EXPIRE key seconds
			为给定的key设置过期时间
		KEYS pattern
			查找所有符合给定模式(pattern)的key
		MOVE key db
			将当前数据库的key移动到给定的数据库db当中
		PERSIST key
			移除key的过期时间，key将持久保持
		TTL key
			以秒为单位，返回给定key的剩余生存时间
		PTTL key
			以毫秒为单位返回key的剩余的过期时间
		RANDOMEKY
			从当前数据库随机返回一个key
		TYPE key
			返回key所储存的值的类型
	String
		SET key value
			设置指定key的值
		GET key
			获取指定key的值
		GETSET key value
			将给定key的值设为value，并返回key的旧值(old value)
		MSET key value [key value...]
			同时设置一个或多个key-value对
		MGET key1 [key2...]
			获取所有（一个或多个）给定key的值
		SETNX key value
			只有在key不存在时设置key的值
		APPEND key value
			如果key已经存在并且是一个字符吕，APPEND命令将value追加到key原来的值的末尾
		INCR key
			将key中储存的数字值增一
		DECR key
			将key中储存的数据值减一
		INCRBY key increment
			将key所储存的值加上给定的增量值（increment)
		DECRBY key decrement
			将key所储存的值减去给定的减量值（decrement)
	Hash
		每一个key对应的value都是一个HashMap，实现为HashTable
		HSET key field value
			将哈希表key中的字段field的值设为value
		HMSET key field1 value1 [field2 value2]
			同时将多个field-value（域-值）对设置到哈希表key中
		HGET key field
			获取存储在哈希表key中指定字段field的值
		HMGET key field1 [field2]
			获取所有给定字段的值
		HKEYS key
			获取所有哈希表中的字段
		HLEN key
			获取哈希表中字段的数量
		HGETALL key
			获取在哈希表中指定key的所有字段和值
		HEXISTS key field
			查看哈希表key中，指定的字段是否存在
		HDEL key field1 [field2]
			删除一个或多个哈希表中的字段
		HVALS key
			获取哈希表中所有值
		HSETNX key field value
			只有在字段field不存在时，设置哈希表字段的值
	List
		LPUSH key value1 [value2]
			将一个或多个值插入到列表头部
		LPUSHX key value
			将一个或多个值插入到已存在的列表头部
		LLEN key
			获取列表长度
		LINDEX key index
			不推荐，效率很低
			通过索引获取列表中的元素
		LINSERT key BEFORE|AFTER pivot value
			在列表的元素前或者后插入元素
		LPOP key
			移出并获取列表的第一个元素
		LRANGE key start stop
			获取列表指定范围内的元素
		LREM key count value
			移除列表元素count个value
		LSET key index value
			通过索引设置列表元素的值
		LTRIM key start stop
			对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
	Set
		SADD key member1 [member2]
			向集合添加一个或多个成员
		SCARD key
			获取集合的成员数
		SISMEMBER key member
			判断member元素是否是集合key的成员
		SMEMBERS key
			返回集合中的所有成员
		SPOP key
			移除并返回集合中的一个随机元素
		SRANDMEMBER key [count]
			返回集合中一个或多个随机数
		SREM key member1 [member2]
			移除集合中一个或多个成员
		SMOVE source destination member
			将member元素从source集合移动到destination集合
		SINTER key1 [key2]
			返回所有给定集合的交集
		SUNION key1 [key2]
			返回所有给定集合的并集
		SDIFF key1 [key2]
			返回所有给定集合的差集
	Sorted set
		ZADD key score1 member1 [score2 member2]
			向有序集合添加一个或多个成员，或者更新已存在成员的分数
		ZCARD key 
			获取有序集合的成员数
		ZCOUNT key min max
			计算在有序集合中指定区间分数的成员数
		ZRANK key member
			返回有序集合中指定成员的索引
		ZRANGE key start stop [WITHSCORES]
			通过索引区间返回有序集合指定区间内的成员
		ZREMRANGEBYSCORE key min max
			返回有序集中，成员的分数值
		ZSCORE key member
			移除有序集合中给定的分数区间的所有成员
		ZREM key member [member...]
			移除有序集合中的一个或者多个成员
		ZUNIONSTORE destination numkeys key [key...]
			计算给定的一个或多个有序集的并集，关存储在新的key中
		ZREMRANGEBYSCORE key min max
			移除有序集合中给定的分数区间的所有成员
Java使用Redis
	Jedis是redis的java版本的客户端实现
	引用jar包
		jedis-2.9.0.jar
		commons-pool2-2.4.2.jar
	例子：
		Jedis jedis = new Jedis("localhost", 6379);
持久化
	Snapshotting（快照）
		快照是默认的持久化方式。这种方式将内存中数据以快照的方式写入到二进制文件中，默认的文件名为dump.rdb,可以配置自动做快照持久化的方式
	Append-only file（AOF）
		AOF比快照方式有更好的持久化性，是由于在使用AOF持久化方式时，redis会将每一个收到的写命令都通过write函数追加到文件中(appendonly.aof)
		当redis重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容
		当然由于OS会在内核中缓存write做的修改，所以可能不是立即写到磁盘上。这样AOF方式的持久化也还是可能会丢失部分修改
		可以通过配置文件告诉redis我们想要通过fsync函数强制OS写入磁盘的时机
事务
	特性
		事务中所有命令都会序列化，按顺序执行，事务在执行的过程中，不会被其他客户端发送来的命令请求所打断
		事务中的命令要么全部都被执行，要么全部都不执行
	三个阶段
		开始事务
		命令入队
		执行事务
	事务命令
		MULTI
			标记一个事务块的开始
		EXEC
			执行所有事务块内的命令
		DISCARD
			取消事务，放弃执行事务块内的所有命令
		WATCH key [key...]
			监视一个（或多个）key，如果在事务执行之前这个（或这些）key被其他命令所改动，那么事务将被打断
		UNWATCH
			取消WATCH命令对所有key的监视
发布／订阅
	一种消息通信模式
		发布者（publisher)发送消息
		订阅者（subscriber)接收消息
	实现了消息系统，发布者在订阅者接收消息时发送消息。传送消息的链路称为信道
	客户端可以订阅任意数量的信道
	常用命令
		PUBLISH channel message
			将信息发送到指定的频道
		SUBSCRIBE channel [channel...]
			订阅给定的一个或多个频道的信息
		UNSUBSCRITBE [channel [channel...]]
			退订给定的频道
		PSUBSCRIBE pattern [pattern...]
			订阅一个或多个符合给定模式的频道
		PUNSUBSCRIBE [pattern [pattern...]]
			退订所有给定模式的频道
		PUBSUB subcommand [argument [argument...]]
			查看订阅与发布系统状态
复制
	基本结构
		slaveof host port
			选项的配置文件
		slaveof no one
			命令服务器终止复制操作
		slaveof host port
			命令服务器开始复制一个新的主服务器
	在Slave启动并连接到Master之后，它将主动发送一个SYNC命令
分区
	概念
		分区是分割数据到多个Redis实例的处理过程，每个实例只保存key的一个子集
	优势
		利用多台计算机内存和值，构造更大的数据库
		利用多核和多台计算机，扩展计算能力
		通过多台计算机和网络适配器，扩展网络带宽
	不足
		涉及多个key的操作通常是不被支持的
		涉及多个key的redis事务不能使用
		数据处理较为复杂，比如需要处理多个rdb／aof文件，并且从多个实例和主机备份持久化文件
		增加或删除容量也比较复杂
	分区类型
		范围分区
		哈希分区
